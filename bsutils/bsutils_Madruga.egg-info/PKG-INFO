Metadata-Version: 2.1
Name: bsutils-Madruga
Version: 0.0.1
Summary: Functions for serial communication
Home-page: https://github.com/pypa/sampleproject
Author: Gabriel Mauly
Author-email: gabrielmaulyfatec@gmail.com
License: UNKNOWN
Description: # Hello bsutils
        
        
        ## Motivação
        
        O pacote <b>bsutils</b> foi criado para facilitar a implementação de códigos que utilizem a comunicação serial. 
        
        O intuito é facilitar e agilizar o desenvolvimento de algoritmos que necessitem de tal comunicação.
        
        
        ## Desenvolvimento
        
        Este pacote foi desenvolvido sobre a utilização de duas bibliotecas: <b>pyserial</b> e <b>loguru</b>.
        Como dependência externa temos as duas bibliotecas, que podem ser instaladas com o seguinte comando:
        
        	pip install pyserial
        	pip install loguru
        
        Ou 
        
        	conda install pyserial
        	conda install loguru
        
        Para a importação do pacote <b>bsutils</b>, use o seguinte trecho de código:
        
        ```python  
        from bsutils.board import Serial 
        ```
        
        ## Classes
        
        Nesta seção será descrita a codificação realizada para a construção do algoritmo.
        
        ### Serial
        
        
        Classe responsável pela comunicação serial.
        
        #### __init__()
        
        Responsável por iniciar algumas variáveis da classe (construtor):
        
        ```python  
        def __init__(self):
        
            self.rate = 9600
            self.time = 1
        ``` 
        
        
        #### open_connection()
        
        Responsável por aplicar permissão na porta serial e abrir a conexão, espera o nome da porta como parâmetro.
        
        ```python  
        def open_connection(self, port):
        
            try:
        
                if sys.platform == 'linux':
                    os.system('sudo chmod -R 777 ' + port)
        
                connection = serial.Serial(port, baudrate=self.rate, timeout=self.time)
                logger.success('Successfully connected')
                return connection
        
            except serial.SerialException:
                logger.error('Check your parameters and your permission.')
                return None
        ```
        #### send_message()
        
        Responsável por enviar uma mensagem na porta serial, espera a conexão e a mensagem como parâmetro.
        
        ```python  
        def send_message(self, connection, message):
        
            if connection is None:
                logger.error('Error in connection')
        
                return False
            else:
                message = str(message)
        
                message = self.create_digit(message)
        
                connection.write(message.encode())
        
                return True
        ```
        
        
        
        #### create_digit()
        
        Responsável por criar o checksum da mensagem a ser enviada pela porta serial, espera a mensagem como parâmetro.
        
        ```python  
        @staticmethod
        def create_digit(information):
        
            information = information.upper()
        
            information += ','
        
            verify_digit = 0
        
            for digit in str(information):
                verify_digit ^= ord(digit)
        
            validated_information = ''
            hexadecimal = hex(verify_digit)
            len_hexadecimal = len(hexadecimal)
        
            if len_hexadecimal == 3:
                validated_information = '0' + hexadecimal[2]
            elif len_hexadecimal == 4:
                validated_information = hexadecimal[2:4]
            else:
                logger.error('Unable to generate validation')
        
            validated_information = '{}*{}\r\n'.format(information, validated_information.upper())
        
            return validated_information.upper()
        ```
        
        #### verify_digit()
        
        
        Responsável por validar o checksum da mensagem recebida pela porta serial, espera a mensagem como parâmetro.
        
        ```python  
        def verify_digit(self, information):
            
            position = information.find('*')
            
            result = self.create_digit(information[:position - 1])
            
            if information[position + 1:] == result[position + 1:]:
                return True
            else:
                return False
        ``` 
        
        ## Exemplos
        
        
        Nesta seção será apresentado algumas aplicações rotineiras com o pacote <b>bsutils</b>.
        
        
        ### Enviando mensagem pela porta serial (pataforma linux):
        
        ```python  
        # importacao da biblioteca
        from bsutils.board import Serial
        
        
        def example():
        
            # objeto da classe
            s = Serial()
        
            # abrindo a conexao
            connection = s.open_connection(port='/dev/ttyUSB0')
        
            # enviando uma mensagem
            s.send_message(connection, 'hello world')
        
            # fechando a conexao
            connection.close()
        
        
        if __name__ == '__main__':
        
            example()
        
        ```
        
        ### Realizando a leitura na porta serial
        
        ```python     
        # importação da lib
        from bsutils.board import Serial
        
        def example():
            
            # objeto da classe
            s = Serial()
            
            # abrindo conexao
            connection = s.open_connection(port='/dev/ttyUSB0')
            
            while True:
                
                # verificando a conexao
                if connection is None:
                    connection = s.open_connection(port='/dev/ttyUSB0')
        
                try:
                    # se possuir comunicação leia e exiba a mensagem
                    if connection.inWaiting() > 0:
                        message = connection.readline().decode('utf-8', 'replace')
                        print(message)
                
                # caracter inválido
                except UnicodeError:
                    print('Invalid character')
                    
                # cabo desconectado
                except IOError:
                    print('Cable disconnected')
                    
                    
        if __name__ == '__main__':
            
            example()
                
        ```        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
